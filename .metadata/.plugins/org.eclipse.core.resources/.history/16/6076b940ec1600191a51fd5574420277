/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2019 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
#include "stm32f7xx_hal_spdifrx.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//check linker script for enough malloc space, here as 1-byte words!
//but above 40 it does not work anymore !!!
//#define SPDIF_SAMPLE_NUM (192 * 2 * 40)
#define SPDIF_SAMPLE_NUM (512 * 4)
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

SPDIFRX_HandleTypeDef hspdif;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint32_t SPDIF_irq_count;
//use malloc, pls. see _Min_Heap_Size  = 0x4000; in LinkerScript.ld
static uint32_t *SPDIFIN0_RxBuf0 = NULL;
static uint32_t *SPDIFIN0_RxBuf1 = NULL;
static uint32_t ntrans = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPDIFRX_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPDIFRX_Init();
  MX_USB_DEVICE_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Allocate the receive buffer
  SPDIFIN0_RxBuf0 = (uint32_t *)malloc(SPDIF_SAMPLE_NUM * 4);
  SPDIFIN0_RxBuf1 = (uint32_t *)malloc(SPDIF_SAMPLE_NUM * 4);
  // Start the SPDIF dataflow
  while (HAL_SPDIFRX_ReceiveDataFlow_IT(&hspdif, SPDIFIN0_RxBuf0, SPDIF_SAMPLE_NUM) == HAL_BUSY) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buf[30];
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Print some debug to the debug console (UART1)
    //sprintf(buf, "Ntrans: %lu\n\r", ntrans);
    //HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
    //HAL_Delay(1000);

    while (hspdif.RxXferCount > 192) ;
    uint8_t *ibuf = (uint8_t*)SPDIFIN0_RxBuf0;
    uint8_t *obuf = (uint8_t*)SPDIFIN0_RxBuf1;
    uint16_t nrec = hspdif.RxXferSize - hspdif.RxXferCount;
    // Byteswap the 32 bit words
    // Note: This should only be performed for DTS encoding
    uint8_t tmp;
    size_t i;
    for (i = 0; i < nrec * 4; i += 4) {
      obuf[i] = ibuf[i + 3];
      obuf[i + 1] = ibuf[i + 2];
      obuf[i + 2] = ibuf[i + 1];
      obuf[i + 3] = ibuf[i];
    }
    __disable_irq();
    nrec = hspdif.RxXferSize - hspdif.RxXferCount;
    hspdif.RxXferCount = SPDIF_SAMPLE_NUM;
    hspdif.pRxBuffPtr  = SPDIFIN0_RxBuf0;
    __enable_irq();
    for ( ; i < nrec * 4; i += 4) {
      obuf[i] = ibuf[i + 3];
      obuf[i + 1] = ibuf[i + 2];
      obuf[i + 2] = ibuf[i + 1];
      obuf[i + 3] = ibuf[i];
    }
    CDC_Transmit_FS(obuf, nrec * 4);
    //sprintf(buf, "Tx\n\r");
    //HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
#if 0
    while (hspdif.RxXferCount > 192) ;
    //sprintf(buf, "Tx\n\r");
    //HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
    uint8_t *cbuf = (uint8_t*)hspdif.pRxBuffPtr;
    uint32_t *nbuf = (hspdif.pRxBuffPtr == SPDIFIN0_RxBuf0) ? SPDIFIN0_RxBuf1 : SPDIFIN0_RxBuf0;
    uint16_t nrec;
    __disable_irq();
    nrec = hspdif.RxXferSize - hspdif.RxXferCount;
    hspdif.RxXferCount = SPDIF_SAMPLE_NUM;
    hspdif.pRxBuffPtr  = nbuf;
    __enable_irq();
    // Byteswap the 32 bit words
    // Note: This should only be performed for DTS encoding
    uint8_t tmp;
    for (size_t i = 0; i < nrec * 4; i += 4) {
      tmp = cbuf[i];
      cbuf[i] = cbuf[i + 3];
      cbuf[i + 3] = tmp;
      tmp = cbuf[i + 1];
      cbuf[i + 1] = cbuf[i + 2];
      cbuf[i + 2] = tmp;
    }
    CDC_Transmit_FS(cbuf, nrec * 4);
#endif
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
  PeriphClkInitStruct.PLLI2SDivQ = 1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{

  /* USER CODE BEGIN SPDIFRX_Init 0 */

  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_32BITS;
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */
#if 0
/**
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *h) {
  uint16_t nrec = h->RxXferSize - h->RxXferCount;
  ntrans += nrec;
#if 0
  // Swap buffers and start a new transfer immediately.
  uint8_t *cbuf = (uint8_t*)h->pRxBuffPtr;
  uint32_t *nbuf = (h->pRxBuffPtr == SPDIFIN0_RxBuf0) ? SPDIFIN0_RxBuf1 : SPDIFIN0_RxBuf0;
  while(HAL_SPDIFRX_ReceiveDataFlow_IT(h, nbuf, SPDIF_SAMPLE_NUM) == HAL_BUSY) ;
  // Byteswap the 32 bit words
  // Note: This should only be performed for DTS encoding
  uint8_t tmp;
  for (size_t i = 0; i < nrec * 4; i += 4) {
    tmp = cbuf[i];
    cbuf[i] = cbuf[i + 3];
    cbuf[i + 3] = tmp;
    tmp = cbuf[i + 1];
    cbuf[i + 1] = cbuf[i + 2];
    cbuf[i + 2] = tmp;
  }
  CDC_Transmit_FS(cbuf, nrec * 4);
#endif
  // Swap buffers and start a new transfer immediately.
  uint8_t *ibuf = (uint8_t*)SPDIFIN0_RxBuf0;
  uint8_t *obuf = (uint8_t*)SPDIFIN0_RxBuf1;
  // Byteswap the 32 bit words
  // Note: This should only be performed for DTS encoding
  for (size_t i = 0; i < nrec * 4; i += 4) {
    obuf[i] = ibuf[i + 3];
    obuf[i + 3] = ibuf[i];
    obuf[i + 1] = ibuf[i + 2];
    obuf[i + 2] = ibuf[i + 1];
  }
  while(HAL_SPDIFRX_ReceiveDataFlow_IT(h, SPDIFIN0_RxBuf0, SPDIF_SAMPLE_NUM) == HAL_BUSY) ;
  CDC_Transmit_FS(obuf, nrec * 4);
}
#endif
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
